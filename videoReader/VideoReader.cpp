/*
Copyright (C) 2013  Timo Rantalainen (tjrantal at gmail dot com)

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

For a copy of the GNU General Public License, see <http://www.gnu.org/licenses/>.
*/
#ifndef VIDEOREADER_H
	#include "VideoReader.h"
#endif
//Constructor
VideoReader::VideoReader(const char* file, int fram)
{
	videoOpen = false;
	av_register_all();	//Register formats
	filename = file;		//File to open
	frames = fram;	//Number of frames to be read
	varattu = frames;
	for (int lll = 0;lll<2;++lll){
		tstamp.push_back(0);
	}

	video = new unsigned char*[frames]; //Allocate memory
		
	// Open video file
	pFormatCtx = NULL;
	printf("%s\n",filename);
	if(avformat_open_input(&pFormatCtx, filename, NULL, NULL)!=0){
		printf("Couldn't open file\n");
		return;
	}
				//return -1; // Couldn't open file
	// Retrieve stream information
	if(avformat_find_stream_info(pFormatCtx,NULL)<0){
		printf("Coudln't find stream\n");
		return;
	}

	av_dump_format(pFormatCtx, 0, filename, 0);
			// Find the first video stream
	videoStream=-1;
	for(unsigned int i=0; i<pFormatCtx->nb_streams; i++)
		if(pFormatCtx->streams[i]->codec->codec_type==AVMEDIA_TYPE_VIDEO)
		{
			videoStream=i;
			break;
		}
	if(videoStream==-1){
		printf("Couldn't find video stream\n");
		return;
	}
	// Get a pointer to the codec context for the video stream
	pCodecCtx=pFormatCtx->streams[videoStream]->codec;
	width = pCodecCtx->width;
	height = pCodecCtx->height;

	// Find the decoder for the video stream
	pCodec=avcodec_find_decoder(pCodecCtx->codec_id);
	if(pCodec==NULL){
		printf("No suitable codec\n");
		return;
		}
	// Open codec
	if(avcodec_open2(pCodecCtx, pCodec,NULL)<0){
		printf("Couldn't open codec\n");
		return;
		}
		// Hack to correct wrong frame rates that seem to be generated by some codecs
	if(pCodecCtx->time_base.num>1000 && pCodecCtx->time_base.den==1)
		pCodecCtx->time_base.den=1000;
	// Allocate video frame
	
	tmp_picture=*(avcodec_alloc_frame());
	if (!&tmp_picture){
		printf("Coulnd't alloc frame\n");
		return;
	}
	/*
	int size;
	size = avpicture_get_size(pCodecCtx->pix_fmt, width, height);
	picture_buf2 = (uint8_t*) av_malloc(size);
	if (!picture_buf2) {
		av_free(&tmp_picture);
		printf("Couldn't av_malloc\n");
		return;
	}
<<<<<<< HEAD
	avpicture_fill((AVPicture*) tmp_picture, picture_buf2,
=======
	avpicture_fill((AVPicture *)&tmp_picture, picture_buf2,
>>>>>>> parent of c6ed2d7... Debugging changed AVFrame picture and tmp_picture to pointers
				   pCodecCtx->pix_fmt, width, height);
	*/
	//Reserve memory for frames
	for (int i = 0;i< frames;i++){
		video[i] =  new unsigned char [width*height*3];
	}

	img_convert_ctx = NULL;
	/*PIX_FMT_YUV420P*/
	if (pCodecCtx->pix_fmt != PIX_FMT_RGB24) {
		printf("diffeent pix_fmt\n");
	
		picture = *(avcodec_alloc_frame());
		if (!&picture){
			printf("Couldn't alloc frame\n");
			return;
		}
		/*
		int size = avpicture_get_size(PIX_FMT_RGB24, width, height);
		picture_buf = (uint8_t*) av_malloc(size);
		if (!picture_buf) {
			av_free(&picture);
			printf("Couldn't av_malloc\n");
			return;
		}
<<<<<<< HEAD
		avpicture_fill((AVPicture*) picture, picture_buf,
=======
		avpicture_fill((AVPicture *)&picture, picture_buf,
>>>>>>> parent of c6ed2d7... Debugging changed AVFrame picture and tmp_picture to pointers
					   PIX_FMT_RGB24, width, height);
		*/
		
		/* as ffmpeg returns a YUV420P picture from a video, we must convert it
		   to the desired pixel format */
		if (img_convert_ctx == NULL) {
			/*Target image format PIX_FMT_RGB24*/
			img_convert_ctx = sws_getContext(pCodecCtx->width, pCodecCtx->height,
											 pCodecCtx->pix_fmt,
											 width, height,
											 PIX_FMT_RGB24
											 , SWS_BICUBIC, NULL, NULL, NULL);
			if (img_convert_ctx == NULL) {
				fprintf(stderr, "Cannot initialize the conversion context\n");
				return;
			}
		}
	}
	videoOpen = true;
}


int VideoReader::readFrames(){

	int frameja2 = 0;
	int frameFinished;

	if (tstamp[0] != 0){ //Have to seek in order to start from the last key frame prior to the time stamp of interest
		printf("\nSeek\n");
		int64_t targetPosition = tstamp[2];
		printf("Tstamp prior to search %ld\n",tstamp[0]);
		int success = av_seek_frame(pFormatCtx,videoStream,tstamp[2],AVSEEK_FLAG_BACKWARD);
		if (success < 0){
			printf("Seek failes %d\n",success);
			return 1;
		}
		bool moreFrames = true;
		while (moreFrames){
			av_read_frame( pFormatCtx, &packet );
			if(packet.stream_index==videoStream)
			{
				avcodec_decode_video2(pCodecCtx, &tmp_picture, &frameFinished, 
	            &packet);
				targetPosition = packet.pts;
				if (targetPosition == tstamp[0]){
					moreFrames = false;
				}
			}
		
			av_free_packet( &packet );
		}
		 printf("Tstamp after seek %ld packet %ld\n",targetPosition,packet.pts);
	}

	while(av_read_frame(pFormatCtx, &packet)>=0 && frameja2 < frames )
	{
	    if(packet.stream_index==videoStream)		 // Is this a packet from the video stream?
	    {
	        avcodec_decode_video2(pCodecCtx, &tmp_picture, &frameFinished, &packet);            // Decode video frame
	        if(frameFinished)	            // Did we get a video frame?
	        {
				if(img_convert_ctx == NULL){
					if (tmp_picture.linesize[0] != width){ //Hack for padding
						for (int zzz = 0; zzz < height;zzz++){
							memcpy(video[frameja2]+zzz*width*3,tmp_picture.data[0]+zzz*tmp_picture.linesize[0]*3,width*sizeof(unsigned char)*3);
						}
					} else {
						memcpy(video[frameja2],tmp_picture.data[0],width*height*sizeof(unsigned char)*3);
					}
				}else{//If pixel_fmt is not targetFormat
					sws_scale(img_convert_ctx, tmp_picture.data, tmp_picture.linesize,
	                  0, height, picture.data, picture.linesize);
			
					if (picture.linesize[0] != width && picture.linesize[0] != width*3){//Hack for padding (probably not needed...
						printf("%d memcpy hack\n",picture.linesize[0]);
						for (int zzz = 0; zzz < height;zzz++){
							memcpy(video[frameja2]+zzz*width*3,picture.data[0]+zzz*tmp_picture.linesize[0]*3,width*sizeof(unsigned char)*3);
						}
					} else {
						memcpy(video[frameja2],picture.data[0],width*height*sizeof(unsigned char)*3);
					}
				}
				frameja2++;
				tstamp.insert(tstamp.begin(),packet.pts);
				printf("tStamp %ld",(long) packet.pts);
				tstamp.pop_back();
			}
	    }
	    // Free the packet that was allocated by av_read_frame
	    av_free_packet(&packet);
	}
	frames = frameja2;
	return 1;
}

VideoReader::~VideoReader(){
	// Close the video file
	printf("\nClosing avformat\n");	//DEBUGGING
	fflush(stdout);			//DEBUGGING
	avformat_close_input(&pFormatCtx);
	// Close the codec
	printf("Closing avcodec\n");		//DEBUGGING
	fflush(stdout);			//DEBUGGING
	avcodec_close(pCodecCtx);
	av_free(pCodecCtx);
	/*
	//Attempt to free pictures
	printf("free tmp_picture\n");	//DEBUGGING
	fflush(stdout);			//DEBUGGING AVFrame
	AVFrame* tempPointer = (AVFrame*) &tmp_picture;
	 av_frame_free(&tempPointer);
	printf("free picture\n");	//DEBUGGING
	fflush(stdout);			//DEBUGGING
	tempPointer = (AVFrame*) &picture;
	 av_frame_free(&tempPointer);
	//Free memory
	*/
	printf("free memory\n");	//DEBUGGING
	fflush(stdout);			//DEBUGGING
	for (int i = 0; i<frames;++i){
		delete[] video[frames];
	}
	printf("delete video**\n");	//DEBUGGING
	fflush(stdout);			//DEBUGGING
	delete[] video;
	printf("set video to NULL\n");	//DEBUGGING
	fflush(stdout);			//DEBUGGING
	video = NULL;
}

int VideoReader::getNumberOfFrames(){
	timeBase= (double)pFormatCtx->streams[videoStream]->time_base.num/(double)pFormatCtx->streams[videoStream]->time_base.den;
	duration = ((double) pFormatCtx->streams[videoStream]->duration)*timeBase;
	startTime=(long) pFormatCtx->streams[videoStream]->start_time;
	double frameInterval = (double)pFormatCtx->streams[videoStream]->codec->time_base.num/(double)pFormatCtx->streams[videoStream]->codec->time_base.den;
	printf("startTime %ld duration %.2f timeBase %.8f frameInterval %.4f\n",startTime,(float) duration,(float) timeBase,(float) frameInterval);
	if (pFormatCtx->streams[videoStream]->nb_frames > 0){
	
		printf("Stream returned the number of frames %d\n",(int) pFormatCtx->streams[videoStream]->nb_frames);
		return (int) pFormatCtx->streams[videoStream]->nb_frames;
	}
	printf("Stream DID NOT return the number of frames %d\n",(int) (duration/frameInterval));

	return (int) (duration/timeBase);
}

